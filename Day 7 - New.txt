
https://dzone.com/articles/implementing-guard-in-angular-5-app


========================================================================================================Tested
###Practice form validation in my-form page of hello-angular-practice:


1) Create a my-form component using the following commands
	
		ng g component MyForm
		
2) import the my-form and then add the my-form in the Routes of app-routing.module.ts

        
        import {MyFormComponent} from './my-form/my-form.component';
		
		{path:'my-form', component:MyFormComponent}
		
		
3) add my-form router link to app.component.html

	<li class="nav-item">
		<a class="nav-link" routerLink="/my-form">My Form</a>
	</li>
	
	
4) add the below html to my-form.component.html


			<div class="container">
			  <div class="jumbotron" style="width:50%;" >
				<h2>Form with Validations</h2>
				<form (ngSubmit)="submitForm()" [formGroup]="complexForm">
			  
			  
				  <div class="form-group">
			  
					<label>First Name:</label>
					<input id="firstName" class="form-control" type="text" placeholder="John" formControlName="firstName">
			  
					<div *ngIf="firstName.errors?.required  && firstName.touched" class="alert alert-danger">You must include a first
					  name.</div>
					  <div *ngIf="firstName.errors?.hasPunctuation" class="alert alert-danger">Name must not have ! or $ characters.</div>
			  
				  </div>
			  
			  
				  <div class="form-group">
					<label>Last Name</label>
					<input id="lastName" class="form-control" type="text" placeholder="Doe" formControlName="lastName">
					<div *ngIf="lastName.errors?.required && lastName.touched" class="alert alert-danger">You must include a last
					  name.</div>
					<div *ngIf="lastName.errors?.minlength && lastName.touched" class="alert alert-danger">Your last name must be at
					  least 5 characters long.</div>
					<div *ngIf="lastName.errors?.maxlength && lastName.touched" class="alert alert-danger">Your last name cannot
					  exceed 10 characters.</div>
				  </div>
				  <div class="form-group">
					<label>Gender</label>
					<div class="alert alert-danger" *ngIf="!gender.valid && gender.touched">You must select a gender.</div>
				  </div>
				  <div class="radio">
					<label>
					  <input type="radio" name="gender" value="Male" formControlName="gender">
					  Male
					</label>
				  </div>
				  <div class="radio">
					<label>
					  <input type="radio" name="gender" value="Female" formControlName="gender">
					  Female
					</label>
				  </div>
				  <div class="form-group">
					<fieldset formGroupName="activities">
					  <div class="form-group">
						<label>Activities</label>
					  </div>
					  <label class="checkbox-inline">
						<input type="checkbox" value="hiking" name="hiking" formControlName="hiking"> Hiking
					  </label>
					  <label class="checkbox-inline">
						<input type="checkbox" value="swimming" name="swimming" formControlName="swimming"> Swimming
					  </label>
					  <label class="checkbox-inline">
						<input type="checkbox" value="running" name="running" formControlName="running"> Running
					  </label>
					</fieldset>
				  </div>
				  <div class="form-group">
					<button type="submit" class="btn btn-primary" [disabled]="!complexForm.valid">Submit</button>
				  </div>
				</form>
			  </div>
			</div>



5) add the below css to my-form.component.css
	.container {
		height: 100%;
		display: flex;
		justify-content: center;
		align-items: center;
	}
	
	
6) add the below imports to  my-form.component.ts

    import { FormGroup, FormBuilder, Validators, FormControl, ValidatorFn, ValidationErrors, AbstractControl } from '@angular/forms';
    import { Observable } from 'rxjs';
	

6) inject the formBuilder to constructor of my-form.component.ts
	constructor(private fb: FormBuilder){
    }
	
	
	
	
7) and then add all the below codes inside the my-form.component.ts

		complexForm = this.fb.group({
			'firstName' : new FormControl('', [Validators.required,this.hasPunctuation("!"),this.hasPunctuation("$")]),
			'lastName': new FormControl('',  Validators.compose([Validators.required, Validators.minLength(2), Validators.maxLength(10)])),
			'gender' : new FormControl(null, Validators.required),
			'activities': this.fb.group({
			  'hiking' : [false],
			  'running' : [false],
			  'swimming' : [false]
			})
	    });



		get firstName() {return this.complexForm.get('firstName')}
		get lastName() {return this.complexForm.get('lastName')}
		get gender() {return this.complexForm.get('gender')}
		get activities() {return this.complexForm.get('activities')}

  

		hasPunctuation(punctuation: string): ValidatorFn{
			  return (control:AbstractControl):  {[key: string]: any} | null => {
				  return control.value.indexOf(punctuation) >= 0 ?
					   {hasPunctuation: true }: null;
			  }
		}

		submitForm(){
			console.log(this.complexForm.value);
			console.log("hiking? "+this.complexForm.get('activities').get('hiking').value);
			console.log("swimming? "+this.complexForm.get('activities').get('swimming').value);
			console.log("running? "+this.complexForm.get('activities').get('running').value);
		}

		

		
			
		
###Practice angular pipes in hello-angular-practice:

1) To show all the first name of the developers in the bio-component.html, update the dev.firstName like below:

    <h3><a [routerLink]="['/bio',dev.id]">{{dev.firstName | uppercase}}</a></h3>
	
	
	
	
	
	
###Practice Gaurd:
1)  Create an auth Gauard
    ng generate guard auth
	
	
2)  Generate a Login Component and Set it Up

	ng g component login
	
3) add login.component.ts to route 
    import { LoginComponent } from './login/login.component';

	{path:'login', component:LoginComponent}
	
4) add login router link to app.component.html

	<li class="nav-item">
		<a class="nav-link" routerLink="/login">Login</a>
	</li>
	
	
5) create a login page with below html
  
	<div class="container">
	  <h1>Login</h1>
	  <div class="row">
	  <div class="col-md-6">
		<form (ngSubmit)="login()" [formGroup]="loginForm" >
			  <div class="form-group">
				<label for="email">Email</label>
				<input type="email" placeholder="Email" class="form-control" formControlName="email">
			  </div>
			  <div class="form-group">
				<label for="password">Password</label>
				<input type="password" placeholder="Password" class="form-control" formControlName="password">
			  </div>
			  <div class="form-group">
				<button type="submit" class="btn btn-success">Login</button>
			  </div>
		</form>
	  </div>
	</div>



6) create auth service 

   ng g service AuthService
   
   
7) Update the auth.service as below
   a) import
   
   import { Router } from '@angular/router';
   
   
   b) inject Router
   
   constructor(private myRoute: Router) { }
   
   
   c) add the following fi=unction
   
		   
		  sendToken(token: string) {
			localStorage.setItem("LoggedInUser", token)
		  }

		  getToken() {
			return localStorage.getItem("LoggedInUser")
		  }

		  isLoggednIn() {
			return this.getToken() !== null;
		  }

		  logout() {
			localStorage.removeItem("LoggedInUser");
			this.myRoute.navigate(["login"]);
		  }
		  
		  
8) Now it is time to edit our login.component.ts file.

			import { Component, OnInit } from '@angular/core';
			import { FormBuilder, Validators } from '@angular/forms';
			import { Router } from '@angular/router';
			import { AuthServiceService } from '../auth-service.service';

			@Component({
			  selector: 'app-login',
			  templateUrl: './login.component.html',
			  styleUrls: ['./login.component.css']
			})
			export class LoginComponent implements OnInit {

			  loginForm;
			  constructor(private fb: FormBuilder,
				private myRoute: Router,
				private auth: AuthServiceService) {
				this.loginForm = fb.group({
				  email: ['', [Validators.required, Validators.email]],
				  password: ['', Validators.required]
				});

			  }

			  ngOnInit() {
			  }

			  login() {
				if (this.loginForm.valid) {
				  this.auth.sendToken(this.loginForm.value.email)
				  this.myRoute.navigate([""]);
				}

			  }
		
		
		
		
9) update auth gurad
	a) import
	import { AuthServiceService } from './auth-service.service';
    import {Router} from '@angular/router';
	
	
	b) update constructor
	constructor(private auth: AuthServiceService,private myRoute: Router){}
	
	
	c)update canActivate
	
		canActivate(
			next: ActivatedRouteSnapshot,
			state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
			  if(this.auth.isLoggednIn()){
				return true;
			  }else{
				this.myRoute.navigate(["login"]);
				return false;
			  }

		  }
	
	
	
10) Do not forget to add AuthService and AuthGuard as providers in app.module.ts.

 imports: [
    BrowserModule,
    FormsModule,
    ReactiveFormsModule,
    AppRoutingModule,
    HttpClientModule,
    AuthGuard
  ],
  
  
  
 11) Use Auth Guard in Routes 
 
 const routes: Routes =[
  {path:'', component: HomeComponent,canActivate: [AuthGuard]},
  {path:'bio', component: BioComponent,canActivate: [AuthGuard]},
  {path:'bio/:id', component: BioDetailsComponent},
  {path:'create-bio', component:BioCreateComponent,canActivate: [AuthGuard]},
  {path:'my-form', component:MyFormComponent,canActivate: [AuthGuard]},
  {path:'login', component:LoginComponent},

];





12) add in app.component.ts

import { AuthService } from '../auth.service';
constructor(private auth: AuthService) { }



13) update navigation in  app.component.html


			<nav class="navbar navbar-expand-sm bg-light">
			  <ul class="navbar-nav">
			  <li class="nav-item">
				<a class="nav-link" *ngIf="auth.isLoggednIn()"  routerLink="">Home</a>
			  </li>
			  <li class="nav-item">
				<a class="nav-link" *ngIf="auth.isLoggednIn()" routerLink="/bio">My Bio</a>
			  </li>
			  <li class="nav-item">
				<a class="nav-link" *ngIf="auth.isLoggednIn()"  routerLink="/create-bio">Create Bio</a>
				</li>
				<li class="nav-item">
				  <a class="nav-link" *ngIf="auth.isLoggednIn()" routerLink="/my-form">My Form</a>
				</li>
				<li class="nav-item">
				  <a class="nav-link" *ngIf="!auth.isLoggednIn()" routerLink="/login">Login</a>
				</li>
			  </ul>
			</nav>

			<router-outlet></router-outlet>
	


